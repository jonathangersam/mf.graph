print relevant


[...recs]
    .map( pipe( filter( allPass(propEq('CIFA-KEY-ACCNO') ('D201150307802RTZ')),
                                propEq('CIFA-KEY-CURSWI')('SGD')                
                       ),
                pick('CIFA-AM','CIFA-SIGN'),
                sortBy('CIFA-AM','CIFA-SIGN')
              )
    
                  



FP in JS without 3rd party libraries!

Think FP in JS requires a library like underscore, lodash, or ramda?
Think again! With the concise arrow syntax of ES6, FP is a breeze!

How breezy? Like one-liners breezy!

/* rules */
- curried
- function first, data-last //thank you ramda js

/* if all you wanted was jquery-style continuations */

[1].map(f).map(f).map(f)[0]

//breakdown //this is basically 'pipe'
[1]           //lift (wrap into functor context)
    .map(f)   //map!
    .map(f)   //map!!
    .map(f)   //map!!!
    [0]       //flatten (get value)



/* Reimplem what an array does fruits */
map = f => x = f(x)
filter = p => x => p(x) ? x : null;
reject = p => x => p(x) ? null : x;
forEach

/* composition */
compose
pipe


/* curry and partial application */
papply
curry / autocurry

/* standard FP */
id

take
drop
head
tail

/* predicates for filtering */
allPass
anyPass
gt
gte
eq
has
sortBy

/* de$tructuring objects */
prop
propEq
pick



/* utilities */
zip
trace

/* Monads! */
withPreview       //Like an IO Monad
withNullGuard     //The 'Maybe' Monad
withErrorHandling //The 'Every' Monad

/* random convenience */
piper
clone



flip = f => (head, ...tail) => f(...tail, head);
a,[b,c] = [b,c],a
b,[c,a] = [c,a],b
c,[a,b] = [a,b],c


--
TNEX scp to RET


FUTURE POST

/* advanced compositions */
composeInterleave
composePromises

/* in-memory hash tables */
lookup
lookupDict
lookupObj
memoize

/* others */
uniq
max
min
union
diff

****

swb got confirmation
answer avaloq phase 2 queries
admin 745 support
tpb517 investigation. i will send results today
confo started rnd on file watcher